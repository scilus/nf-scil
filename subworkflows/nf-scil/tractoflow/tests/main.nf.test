// TODO nf-core: Once you have added the required tests, please run the following command to build this file:
// nf-core subworkflows test tractoflow
nextflow_workflow {

    name "Test Subworkflow TRACTOFLOW"
    script "../main.nf"
    workflow "TRACTOFLOW"
    config "./nextflow.config"

    tag "subworkflows"
    tag "subworkflows_nfcore"
    tag "subworkflows/tractoflow"
    // Included subworkflows
    tag "anatomical_segmentation"
    tag "preproc_dwi"
    tag "preproc_t1"
    tag "registration"
    // Included modules
    tag "reconst/dtimetrics"
    tag "registration/antsapplytransforms"
    tag "reconst/frf"
    tag "reconst/meanfrf"
    tag "reconst/dtimetrics"
    tag "reconst/fodf"
    tag "tracking/pfttracking"
    tag "tracking/localtracking"

    tag "load_test_data"

    setup {
        run("LOAD_TEST_DATA", alias: "LOAD_DATA") {
            script "../../load_test_data/main.nf"
            process {
                """
                input[0] = Channel.from(
                    ["antsbet.zip" , "raw_T1w.zip", "raw_DWIss1000-dir32.zip", "raw_EPI.zip"]
                )
                input[1] = "test.load-test-data"
                """
            }
        }
    }

    test("tractoflow - REV B0") {

        when {
            workflow {
                """
                ch_split_test_data = LOAD_DATA.out.test_data_directory
                    .branch{
                        antsbet: it.simpleName == "antsbet"
                        raw_t1w: it.simpleName == "raw_T1w"
                        raw_dwi: it.simpleName == "raw_DWIss1000-dir32"
                        raw_epi: it.SimpleName == "raw_EPI"
                    }
                input[0] = ch_split_test_data.raw_dwi.map{
                    test_data_directory -> [
                        [ id:'test', single_end:false ],
                        file("\${test_data_directory}/dwi.nii.gz"),
                        file("\${test_data_directory}/dwi.bval"),
                        file("\${test_data_directory}/dwi.bvec")
                    ]}
                input[1] = Channel.from( [] )
                input[2] = Channel.from( [] )
                input[3] = ch_split_test_data.raw_epi.map{
                    test_data_directory -> [
                        [ id:'test', single_end:false ],
                        file("\${test_data_directory}/epi.nii.gz")
                    ]}
                input[4] = ch_split_test_data.raw_t1w.map{
                    test_data_directory -> [
                        [ id:'test', single_end:false ],
                        file("\${test_data_directory}/T1w.nii.gz")
                    ]}
                input[5] = Channel.from( [] )
                input[6] = Channel.from( [] )
                input[7] = Channel.from( [] )
                input[8] = ch_split_test_data.antsbet.map{
                    test_data_directory -> file("\${test_data_directory}/t1_template.nii.gz")}
                input[9] = ch_split_test_data.antsbet.map{
                    test_data_directory -> file("\${test_data_directory}/t1_brain_probability_map.nii.gz")}
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(workflow.out).match()}
                //TODO nf-core: Add all required assertions to verify the test output.
            )
        }
    }
}

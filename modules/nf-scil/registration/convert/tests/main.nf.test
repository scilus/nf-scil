nextflow_process {

    name "Test Process REGISTRATION_CONVERT"
    script "../main.nf"
    process "REGISTRATION_CONVERT"

    tag "modules"
    tag "modules_nfcore"
    tag "registration"
    tag "registration/convert"

    tag "subworkflows"
    tag "subworkflows/load_test_data"


    setup {
        run("LOAD_TEST_DATA", alias: "LOAD_DATA") {
            script "../../../../../subworkflows/nf-scil/load_test_data/main.nf"
            process {
                """
                input[0] = Channel.from( [ "freesurfer.zip" ] )
                input[1] = "test.load-test-data"
                """
            }
        }
    }

    test("registration - convert - default") {

        config "./nextflow_default.config"

        when {
            process {
                """
                input[0] = LOAD_DATA.out.test_data_directory.map{
                    test_data_directory -> [
                        [ id:'test', single_end:false ], // meta map
                        file("/workspaces/nf-scil/fs_deform.nii.gz"),
                        file("/workspaces/nf-scil/fs_affine.lta"),
                        file("\${test_data_directory}/t1.nii.gz"),
                        [],
                        file("\${test_data_directory}/license.txt")
                    ]
                }
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("registration - convert - fsants") {

        config "./nextflow_fsants.config"

        when {
            process {
                """
                input[0] = LOAD_DATA.out.test_data_directory.map{
                    test_data_directory -> [
                        [ id:'test', single_end:false ], // meta map
                        file("/workspaces/nf-scil/fs_deform.nii.gz"),
                        file("/workspaces/nf-scil/fs_affine.lta"),
                        file("\${test_data_directory}/t1.nii.gz"),
                        file("\${test_data_directory}/fa.nii.gz"),
                        file("\${test_data_directory}/license.txt")
                    ]
                }
                """
            }
        }
    }

    // FSL output not fully implemented in mri_warp_convert

    // test("registration - convert - fsfsl") {

    //     config "./nextflow_fsfsl.config"

    //     when {
    //         process {
    //             """
    //             input[0] = LOAD_DATA.out.test_data_directory.map{
    //                 test_data_directory -> [
    //                     [ id:'test', single_end:false ], // meta map
    //                     file("/workspaces/nf-scil/fs_deform.nii.gz"),
    //                     file("/workspaces/nf-scil/fs_affine.lta"),
    //                     file("\${test_data_directory}/t1.nii.gz"),
    //                     file("\${test_data_directory}/fa.nii.gz"),
    //                     file("/workspaces/nf-scil/license.txt")
    //                 ]
    //             }
    //             """
    //         }
    //     }

    //     then {
    //         assertAll(
    //             { assert process.success },
    //             { assert snapshot(process.out).match() }
    //         )
    //     }
    // }

    test("registration - convert - fslfs") {

        config "./nextflow_fslfs.config"

        when {
            process {
                """
                input[0] = LOAD_DATA.out.test_data_directory.map{
                    test_data_directory -> [
                        [ id:'test', single_end:false ], // meta map
                        file("/workspaces/nf-scil/fsl_deform.nii.gz"),
                        file("/workspaces/nf-scil/fsl_affine.mat"),
                        file("\${test_data_directory}/t1.nii.gz"),
                        file("\${test_data_directory}/fa.nii.gz"),
                        file("\${test_data_directory}/license.txt")
                    ]
                }
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("registration - convert - fslants") {

        config "./nextflow_fslants.config"

        when {
            process {
                """
                input[0] = LOAD_DATA.out.test_data_directory.map{
                    test_data_directory -> [
                        [ id:'test', single_end:false ], // meta map
                        file("/workspaces/nf-scil/fsl_deform.nii.gz"),
                        file("/workspaces/nf-scil/fsl_affine.mat"),
                        file("\${test_data_directory}/t1.nii.gz"),
                        file("\${test_data_directory}/fa.nii.gz"),
                        file("\${test_data_directory}/license.txt")
                    ]
                }
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("registration - convert - antsfs") {

        config "./nextflow_antsfs.config"

        when {
            process {
                """
                input[0] = LOAD_DATA.out.test_data_directory.map{
                    test_data_directory -> [
                        [ id:'test', single_end:false ], // meta map
                        file("/workspaces/nf-scil/ants_deform.nii.gz"),
                        file("/workspaces/nf-scil/ants_affine.txt"),
                        file("\${test_data_directory}/t1.nii.gz"),
                        file("\${test_data_directory}/fa.nii.gz"),
                        file("\${test_data_directory}/license.txt")
                    ]
                }
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

test("registration - convert - fslants") {

        config "./nextflow_fslants.config"

        when {
            process {
                """
                input[0] = LOAD_DATA.out.test_data_directory.map{
                    test_data_directory -> [
                        [ id:'test', single_end:false ], // meta map
                        file("/workspaces/nf-scil/fsl_deform.nii.gz"),
                        file("/workspaces/nf-scil/fsl_affine.mat"),
                        file("\${test_data_directory}/t1.nii.gz"),
                        file("\${test_data_directory}/fa.nii.gz"),
                        file("\${test_data_directory}/license.txt")
                    ]
                }
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    // FSL output not fully implemented in mri_warp_convert

    // test("registration - convert - antsfsl") {

    //     config "./nextflow_antsfsl.config"

    //     when {
    //         process {
    //             """
    //             input[0] = LOAD_DATA.out.test_data_directory.map{
    //                 test_data_directory -> [
    //                     [ id:'test', single_end:false ], // meta map
    //                     file("/workspaces/nf-scil/ants_deform.nii.gz"),
    //                     file("/workspaces/nf-scil/ants_affine.txt"),
    //                     file("\${test_data_directory}/t1.nii.gz"),
    //                     file("\${test_data_directory}/fa.nii.gz"),
    //                     file("/workspaces/nf-scil/license.txt")
    //                 ]
    //             }
    //             """
    //         }
    //     }

    //     then {
    //         assertAll(
    //             { assert process.success },
    //             { assert snapshot(process.out).match() }
    //         )
    //     }
    // }
}

nextflow_process {

    name "Test Process BUNDLE_STATS"
    script "../main.nf"
    process "BUNDLE_STATS"

    tag "modules"
    tag "modules_nfcore"
    tag "bundle"
    tag "bundle/stats"

    tag "subworkflows"
    tag "subworkflows/load_test_data"

    setup {
        run("LOAD_TEST_DATA", alias: "LOAD_DATA") {
            script "../../../../../subworkflows/nf-scil/load_test_data/main.nf"
            process {
                """
                input[0] = Channel.from( [ "tractometry.zip" ] )
                input[1] = "test.load-test-data"
                """
            }
        }
    }

    test("bundle - stats") {
        config "./nextflow.config"
        when {
            process {
                """
                input[0] = LOAD_DATA.out.test_data_directory.map{
                    test_data_directory -> [
                        [ id:'test', single_end:false ], // meta map
                        file("\${test_data_directory}/IFGWM.trk"),
                        file("\${test_data_directory}/IFGWM_labels_map.nii.gz"),
                        file("\${test_data_directory}/mni_masked.nii.gz"),
                        []
                    ]}
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("bundle - stats - light") {
        config "./nextflow_light.config"
        when {
            process {
                """
                input[0] = LOAD_DATA.out.test_data_directory.map{
                    test_data_directory -> [
                        [ id:'test', single_end:false ], // meta map
                        file("\${test_data_directory}/IFGWM{,_color}.trk"),
                        file("\${test_data_directory}/IFGWM{_labels_map,}.nii.gz"),
                        file("\${test_data_directory}/mni_masked.nii.gz"),
                        []
                    ]}
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("bundle - stats - lesions") {
        config "./nextflow_lesions.config"
        when {
            process {
                """
                input[0] = LOAD_DATA.out.test_data_directory.map{
                    test_data_directory -> [
                        [ id:'test', single_end:false ], // meta map
                        file("\${test_data_directory}/IFGWM.trk",),
                        file("\${test_data_directory}/IFGWM_labels_map.nii.gz"),
                        file("\${test_data_directory}/mni_masked.nii.gz"),
                        file("\${test_data_directory}/IFGWM.nii.gz")
                    ]}
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}

---
name: "bundle_stats"
description: |
  Compile statistics on bundle profiles. Uses the data after segmenting the tractogram into different bundles, which in turn are segmented into different sections.
  This module allows you to perform statistical analysis on bundles using metrics maps. You can choose from several types of statistics.
  -----------  Available statistics  -----------
  volume:
    - volume_info: volume, volume_endpoints
    - streamlines_info: streamlines_count, avg_length (in mm or in number of point), average step size, min_length, max_length.
    - shape_info: span, curl, diameter, elongation, surface area, irregularity, end surface area, radius, end surface irregularity, mean_curvature, fractal dimension.
      ** The diameter, here, is a simple estimation using volume / length.

  length:
    number of streamlines, and mean / min / max / std of :
    - length in number of points
    - length in mm
    - step size.

  endpoints:
    Computes the endpoint map of a bundle. The endpoint map is simply a count of the number of streamlines that start or end in each voxel.
    Then, Compute the statistics (mean, std) of scalar maps, which can represent diffusion metrics, in endpoint map.

  mean std:
    - mean and std for each metric.

  streamline count:
    - number of streamlines in a tractogram. (as this information is given by the volume stat you can choose to want only the streamlines count by deactivating volume and activating streamlines count.)

  volume per labels:
    - bundle volume per label in mm3. This script supports anisotropic voxels resolution.
      Volume is estimated by counting the number of voxel occupied by each label and multiplying it by the volume of a single voxel.

  mean std per labels:
    - mean and std for each metric along the bundle for each point(labels).

  **To create label_map and distance_map, see scil_bundle_label_map.py

keywords:
  - Bundle
  - Labels
  - Statistic
  - Volume
  - Length
  - Endpoint
  - Mean std
  - Streamlines count
  - json

tools:
  - "scilpy":
      description: "The Sherbrooke Connectivity Imaging Lab (SCIL) Python dMRI processing toolbox."
      homepage: "https://github.com/scilus/scilpy.git"

input:
  - meta:
      type: map
      description: |
        Groovy Map containing sample information
        e.g. `[ id:'sample1', single_end:false ]`

  - bundles:
      type: file
      description: Fiber bundle file to compute statistics on.
      pattern: "*.trk"

  - labels_map:
      type: file
      description:
        label map of the corresponding fiber bundle. this file must have the same dimension than bundle file and have datatype in int.
        If you have multiple bundes, it must have the same numbers of sections.
      pattern: "*.nii.gz"

  - metrics:
      type: file
      description: Nifti file to compute statistics on. Probably some tractometry measure(s) such as FA, MD, RD, ...
        The metrics has to follow a specific naming convention.
      pattern: "*_{bundle_name}_{metric_name}.nii.gz"

  - lesions:
      type: file
      description: Nifti lesion volume to compute statistics on. The lesion mask must be a binary mask.
      pattern: "*.nii.gz"

output:
  - meta:
      type: map
      description: |
        Groovy Map containing sample information
        e.g. `[ id:'sample1', single_end:false ]`

  - length:
      type: file
      description: Information on a tractogram, number of streamlines, mean / min / max / std of length in number of points, length in mm and step size.
      pattern: "*__length_stats.json"

  - endpoints_raw:
      type: file
      description: Estimation of the cortical area affected by the bundle (assuming streamlines start/end in the cortex).
      pattern: "*__endpoints_map_raw.json"

  - endpoints_metric_stats:
      type: file
      description: Compute the statistics of metrics at the bundle endpoint map.
      pattern: "*__endpoints_metric_stats.json"

  - mean_std:
      type: file
      description: Average the metric values of all voxels occupied by the bundle.
      pattern: "*__mean_std.json"

  - volume:
      type: file
      description: Evaluate basic measurements of bundle(s).
      pattern: "*__volume.json"

  - volume_lesions:
      type: file
      description: Compute bundle volume in each lesions in mm3.
      pattern: "*__volume_lesion.json"

  - streamline_count:
      type: file
      description: Return the number of streamlines in a tractogram.
      pattern: "*__streamline_count.json"

  - streamline_count_lesions:
      type: file
      description: Return the number of streamlines in each lesions.
      pattern: "*__streamline_count_lesions.json"

  - volume_per_labels:
      type: file
      description: Compute bundle volume per label in mm3. This script supports anisotropic voxels resolution. Volume is estimated by counting the number of voxel occupied by each label and multiplying it by the volume of a single voxel.
      pattern: "*__volume_per_label.json"

  - volume_per_labels_lesions:
      type: file
      description: Compute bundle volume per label in each lesions in mm3.
      pattern: "*__volume_per_label_lesions.json"

  - mean_std_per_point:
      type: file
      description: Average the metric values of all voxels occupied by the bundle per label.
      pattern: "*__mean_std_per_point.json"

  - lesion_stats:
      type: file
      description: File of the lesion-wise volume measure.
      pattern: "*_lesion_stats.json"

  - endpoints_head:
      type: file
      description: Endpoint head map of bundle. The endpoint head map is simply a count of the number of streamlines that start in each voxel.
      pattern: "*.nii.gz"

  - endpoints_tail:
      type: file
      description: Endpoint tail map of bundle. The endpoint tail map is simply a count of the number of streamlines that end in each voxel.
      pattern: "*.nii.gz"

  - lesion_map:
      type: file
      description: Nifti files of labelized lesion(s) map for each bundles.
      pattern: "*.nii.gz"

  - versions:
      type: file
      description: File containing software versions
      pattern: "versions.yml"

authors:
  - "@ThoumyreStanislas"
maintainers:
  - "@ThoumyreStanislas"

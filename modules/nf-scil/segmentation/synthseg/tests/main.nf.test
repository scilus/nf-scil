nextflow_process {

    name "Test Process SEGMENTATION_SYNTHSEG"
    script "../main.nf"
    process "SEGMENTATION_SYNTHSEG"

    tag "modules"
    tag "modules_nfcore"
    tag "segmentation"
    tag "segmentation/synthseg"

    tag "subworkflows"
    tag "subworkflows/load_test_data"

    setup {
        run("LOAD_TEST_DATA", alias: "LOAD_DATA") {
            script "../../../../../subworkflows/nf-scil/load_test_data/main.nf"
            process {
                """
                input[0] = Channel.from( [ "freesurfer.zip" ] )
                input[1] = "test.load-test-data"
                """
            }
        }
    }

    test("segmentation - synthseg - basic") {
        config "./nextflow_basic.config"
        when {
            process {
                """
                input[0] = LOAD_DATA.out.test_data_directory.map{
                    test_data_directory -> [
                        [ id:'test', single_end:false ], // meta map
                        file("\${test_data_directory}/t1.nii.gz", checkIfExists: true,),
                        [],
                        file("\${test_data_directory}/license.txt", checkIfExists: true,)
                    ]
                }
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }

            )
        }
    }

    test("segmentation - synthseg - options") {
        config "./nextflow_options.config"
        when {
            process {
                """
                input[0] = LOAD_DATA.out.test_data_directory.map{
                    test_data_directory -> [
                        [ id:'test', single_end:false ], // meta map
                        file("\${test_data_directory}/t1.nii.gz", checkIfExists: true,),
                        [],
                        file("\${test_data_directory}/license.txt", checkIfExists: true,)
                    ]
                }
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }

            )
        }
    }

    // test("segmentation - synthseg - lesion") {
    //     config "./nextflow_lesion.config"
    //     when {
    //         process {
    //             """
    //             input[0] = LOAD_DATA.out.test_data_directory.map{
    //                 test_data_directory -> [
    //                     [ id:'test', single_end:false ], // meta map
    //                     file("\${test_data_directory}/t1.nii.gz", checkIfExists: true,),
    //                     file("\${test_data_directory}/lesion.nii.gz", checkIfExists: true,),
    //                     file("\${test_data_directory}/license.txt", checkIfExists: true,)

    //                 ]
    //             }
    //             """
    //         }
    //     }

    //     then {
    //         assertAll(
    //             { assert process.success },
    //             { assert snapshot(process.out).match() }
    //         )
    //     }
    // }

}

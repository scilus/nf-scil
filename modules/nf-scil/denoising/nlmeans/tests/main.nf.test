nextflow_process {

    name "Test Process DENOISING_NLMEANS"
    script "../main.nf"
    process "DENOISING_NLMEANS"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "denoising"
    tag "denoising/nlmeans"

    tag "subworkflows"
    tag "subworkflows/load_test_data"

    setup {
        run("LOAD_TEST_DATA", alias: "LOAD_DATA") {
            script "../../../../../subworkflows/nf-scil/load_test_data/main.nf"
            process {
                """
                input[0] = Channel.from( [ "raw_b0.zip", "raw_segmentation.zip" ] )
                input[1] = "test.load-test-data"
                """
            }
        }
    }

    test("denoising - nlmeans") {

        when {
            process {
                """
                ch_split_test_data = LOAD_DATA.out.test_data_directory
                    .branch{
                        b0: it.simpleName == "raw_b0"
                        segmentation: it.simpleName == "raw_segmentation"
                    }
                ch_b0 = ch_split_test_data.b0.map{
                    test_data_directory -> [
                        [ id:'test' ],
                        file("\${test_data_directory}/b0.nii.gz")
                    ]
                }
                ch_mask = ch_split_test_data.segmentation.map{
                    test_data_directory -> [
                        [ id:'test' ],
                        file("\${test_data_directory}/brainmask/slices/axial.nii.gz")
                    ]
                }
                input[0] = ch_b0
                    .join(ch_mask)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
